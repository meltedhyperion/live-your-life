// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: destinations_queries.sql

package pg_db

import (
	"context"
	"encoding/json"

	"github.com/lib/pq"
)

const getDestinationByID = `-- name: GetDestinationByID :one
SELECT city, country, fun_facts, trivia
FROM destinations
WHERE id = $1
`

type GetDestinationByIDRow struct {
	City     string          `json:"city"`
	Country  string          `json:"country"`
	FunFacts json.RawMessage `json:"fun_facts"`
	Trivia   json.RawMessage `json:"trivia"`
}

func (q *Queries) GetDestinationByID(ctx context.Context, id int32) (*GetDestinationByIDRow, error) {
	row := q.queryRow(ctx, q.getDestinationByIDStmt, getDestinationByID, id)
	var i GetDestinationByIDRow
	err := row.Scan(
		&i.City,
		&i.Country,
		&i.FunFacts,
		&i.Trivia,
	)
	return &i, err
}

const getRandomDestinationForSessions = `-- name: GetRandomDestinationForSessions :many

SELECT id, city, country
FROM destinations
WHERE id NOT IN (SELECT unnest($1::int[]))
ORDER BY RANDOM()
LIMIT $2
`

type GetRandomDestinationForSessionsParams struct {
	Column1 []int32 `json:"column_1"`
	Limit   int32   `json:"limit"`
}

type GetRandomDestinationForSessionsRow struct {
	ID      int32  `json:"id"`
	City    string `json:"city"`
	Country string `json:"country"`
}

// -- name: GetRandomDestinationsForSessionQuestions :many
// SELECT id, city, country, clues
// FROM destinations
// ORDER BY RANDOM()
// LIMIT $1;
func (q *Queries) GetRandomDestinationForSessions(ctx context.Context, arg *GetRandomDestinationForSessionsParams) ([]*GetRandomDestinationForSessionsRow, error) {
	rows, err := q.query(ctx, q.getRandomDestinationForSessionsStmt, getRandomDestinationForSessions, pq.Array(arg.Column1), arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRandomDestinationForSessionsRow{}
	for rows.Next() {
		var i GetRandomDestinationForSessionsRow
		if err := rows.Scan(&i.ID, &i.City, &i.Country); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomDestinations = `-- name: GetRandomDestinations :many
SELECT id, city, country
FROM destinations
WHERE id NOT IN (SELECT unnest($1::int[]))
ORDER BY RANDOM()
LIMIT 15
`

type GetRandomDestinationsRow struct {
	ID      int32  `json:"id"`
	City    string `json:"city"`
	Country string `json:"country"`
}

func (q *Queries) GetRandomDestinations(ctx context.Context, dollar_1 []int32) ([]*GetRandomDestinationsRow, error) {
	rows, err := q.query(ctx, q.getRandomDestinationsStmt, getRandomDestinations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRandomDestinationsRow{}
	for rows.Next() {
		var i GetRandomDestinationsRow
		if err := rows.Scan(&i.ID, &i.City, &i.Country); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomDestinationsForQuestions = `-- name: GetRandomDestinationsForQuestions :many
SELECT id, city, country, clues
FROM destinations
ORDER BY RANDOM()
LIMIT 5
`

type GetRandomDestinationsForQuestionsRow struct {
	ID      int32           `json:"id"`
	City    string          `json:"city"`
	Country string          `json:"country"`
	Clues   json.RawMessage `json:"clues"`
}

func (q *Queries) GetRandomDestinationsForQuestions(ctx context.Context) ([]*GetRandomDestinationsForQuestionsRow, error) {
	rows, err := q.query(ctx, q.getRandomDestinationsForQuestionsStmt, getRandomDestinationsForQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRandomDestinationsForQuestionsRow{}
	for rows.Next() {
		var i GetRandomDestinationsForQuestionsRow
		if err := rows.Scan(
			&i.ID,
			&i.City,
			&i.Country,
			&i.Clues,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomDestinationsForSessionQuestions = `-- name: GetRandomDestinationsForSessionQuestions :many
SELECT id FROM destinations
ORDER BY RANDOM()
LIMIT 10
`

func (q *Queries) GetRandomDestinationsForSessionQuestions(ctx context.Context) ([]int32, error) {
	rows, err := q.query(ctx, q.getRandomDestinationsForSessionQuestionsStmt, getRandomDestinationsForSessionQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
