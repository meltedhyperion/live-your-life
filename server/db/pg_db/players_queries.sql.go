// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: players_queries.sql

package pg_db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createNewPlayer = `-- name: CreateNewPlayer :exec
INSERT INTO players (
    id, 
    avatar, 
    name, 
    correct_answers, 
    total_attempts, 
    score, 
    created_at, 
    updated_at
)
VALUES (
    $1, 
    $2, 
    $3, 
    0, 
    0, 
    0.0, 
    CURRENT_TIMESTAMP, 
    CURRENT_TIMESTAMP
)
`

type CreateNewPlayerParams struct {
	ID     uuid.UUID `json:"id"`
	Avatar string    `json:"avatar"`
	Name   string    `json:"name"`
}

func (q *Queries) CreateNewPlayer(ctx context.Context, arg *CreateNewPlayerParams) error {
	_, err := q.exec(ctx, q.createNewPlayerStmt, createNewPlayer, arg.ID, arg.Avatar, arg.Name)
	return err
}

const getLeaderboardDetails = `-- name: GetLeaderboardDetails :many
SELECT name, avatar, correct_answers, total_attempts, score 
FROM players
WHERE id IN (SELECT unnest($1::uuid[]))
`

type GetLeaderboardDetailsRow struct {
	Name           string  `json:"name"`
	Avatar         string  `json:"avatar"`
	CorrectAnswers int32   `json:"correct_answers"`
	TotalAttempts  int32   `json:"total_attempts"`
	Score          float64 `json:"score"`
}

func (q *Queries) GetLeaderboardDetails(ctx context.Context, dollar_1 []uuid.UUID) ([]*GetLeaderboardDetailsRow, error) {
	rows, err := q.query(ctx, q.getLeaderboardDetailsStmt, getLeaderboardDetails, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetLeaderboardDetailsRow{}
	for rows.Next() {
		var i GetLeaderboardDetailsRow
		if err := rows.Scan(
			&i.Name,
			&i.Avatar,
			&i.CorrectAnswers,
			&i.TotalAttempts,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeaderboardForFriends = `-- name: GetLeaderboardForFriends :many
SELECT p.name, p.avatar, p.correct_answers, p.total_attempts, p.score 
FROM players p
WHERE p.id = $1

UNION

SELECT p.name, p.avatar, p.correct_answers, p.total_attempts, p.score 
FROM players p
JOIN friends f ON f.player2_id = p.id
WHERE f.player1_id = $1
`

type GetLeaderboardForFriendsRow struct {
	Name           string  `json:"name"`
	Avatar         string  `json:"avatar"`
	CorrectAnswers int32   `json:"correct_answers"`
	TotalAttempts  int32   `json:"total_attempts"`
	Score          float64 `json:"score"`
}

func (q *Queries) GetLeaderboardForFriends(ctx context.Context, id uuid.UUID) ([]*GetLeaderboardForFriendsRow, error) {
	rows, err := q.query(ctx, q.getLeaderboardForFriendsStmt, getLeaderboardForFriends, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetLeaderboardForFriendsRow{}
	for rows.Next() {
		var i GetLeaderboardForFriendsRow
		if err := rows.Scan(
			&i.Name,
			&i.Avatar,
			&i.CorrectAnswers,
			&i.TotalAttempts,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerById = `-- name: GetPlayerById :one
SELECT id, avatar, name, correct_answers, total_attempts, score, created_at, updated_at FROM players WHERE id = $1
`

func (q *Queries) GetPlayerById(ctx context.Context, id uuid.UUID) (*Player, error) {
	row := q.queryRow(ctx, q.getPlayerByIdStmt, getPlayerById, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Avatar,
		&i.Name,
		&i.CorrectAnswers,
		&i.TotalAttempts,
		&i.Score,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updatePlayerScore = `-- name: UpdatePlayerScore :exec
UPDATE players
SET
    correct_answers = $1,
    total_attempts = $2,
    score = $3,
    updated_at = $4
WHERE id = $5
`

type UpdatePlayerScoreParams struct {
	CorrectAnswers int32     `json:"correct_answers"`
	TotalAttempts  int32     `json:"total_attempts"`
	Score          float64   `json:"score"`
	UpdatedAt      time.Time `json:"updated_at"`
	ID             uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePlayerScore(ctx context.Context, arg *UpdatePlayerScoreParams) error {
	_, err := q.exec(ctx, q.updatePlayerScoreStmt, updatePlayerScore,
		arg.CorrectAnswers,
		arg.TotalAttempts,
		arg.Score,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
