// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: friends_queries.sql

package pg_db

import (
	"context"

	"github.com/google/uuid"
)

const addFriend = `-- name: AddFriend :exec
INSERT INTO friends (player1_id, player2_id)
VALUES ($1, $2),
       ($2, $1)
`

type AddFriendParams struct {
	Player1ID uuid.UUID `json:"player1_id"`
	Player2ID uuid.UUID `json:"player2_id"`
}

func (q *Queries) AddFriend(ctx context.Context, arg *AddFriendParams) error {
	_, err := q.exec(ctx, q.addFriendStmt, addFriend, arg.Player1ID, arg.Player2ID)
	return err
}

const getFriendsIdListOfPlayerByID = `-- name: GetFriendsIdListOfPlayerByID :many
SELECT player2_id FROM friends WHERE player1_id = $1
`

func (q *Queries) GetFriendsIdListOfPlayerByID(ctx context.Context, player1ID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.query(ctx, q.getFriendsIdListOfPlayerByIDStmt, getFriendsIdListOfPlayerByID, player1ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var player2_id uuid.UUID
		if err := rows.Scan(&player2_id); err != nil {
			return nil, err
		}
		items = append(items, player2_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
