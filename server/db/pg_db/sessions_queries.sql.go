// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sessions_queries.sql

package pg_db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createUserSession = `-- name: CreateUserSession :exec

INSERT INTO sessions (
    user_id,
    destinations
) VALUES ($1, $2)
`

type CreateUserSessionParams struct {
	UserID       uuid.UUID `json:"user_id"`
	Destinations []int32   `json:"destinations"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg *CreateUserSessionParams) error {
	_, err := q.exec(ctx, q.createUserSessionStmt, createUserSession, arg.UserID, pq.Array(arg.Destinations))
	return err
}

const getAllUserSessionByID = `-- name: GetAllUserSessionByID :one
SELECT id FROM sessions WHERE user_id = $1 
ORDER BY id ASC 
LIMIT 1
`

func (q *Queries) GetAllUserSessionByID(ctx context.Context, userID uuid.UUID) (int32, error) {
	row := q.queryRow(ctx, q.getAllUserSessionByIDStmt, getAllUserSessionByID, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserSessionByID = `-- name: GetUserSessionByID :one
SELECT id, user_id, destinations, score, total_attempted, correct FROM sessions WHERE id = $1 AND user_id = $2
`

type GetUserSessionByIDParams struct {
	ID     int32     `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetUserSessionByID(ctx context.Context, arg *GetUserSessionByIDParams) (*Session, error) {
	row := q.queryRow(ctx, q.getUserSessionByIDStmt, getUserSessionByID, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		pq.Array(&i.Destinations),
		&i.Score,
		&i.TotalAttempted,
		&i.Correct,
	)
	return &i, err
}

const updateUserSession = `-- name: UpdateUserSession :exec
UPDATE sessions
SET
    score = $1,
    total_attempted = $2,
    correct = $3
WHERE id = $4
`

type UpdateUserSessionParams struct {
	Score          float64       `json:"score"`
	TotalAttempted sql.NullInt32 `json:"total_attempted"`
	Correct        sql.NullInt32 `json:"correct"`
	ID             int32         `json:"id"`
}

func (q *Queries) UpdateUserSession(ctx context.Context, arg *UpdateUserSessionParams) error {
	_, err := q.exec(ctx, q.updateUserSessionStmt, updateUserSession,
		arg.Score,
		arg.TotalAttempted,
		arg.Correct,
		arg.ID,
	)
	return err
}
